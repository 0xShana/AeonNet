@compiler >= 4

contract TimeLockAggregator =
   record state  = 
      { lockGroup : map(address, lockSequence) }

   record lockSequence =
      { lockStart : int
      , lockRoute : int
      , lockNonce : int }

   entrypoint init() = { lockGroup = {} }

   stateful entrypoint timeLockAggregator(lock_Owner: address, lock_Start': string, lock_Route': string, lock_Nonce: int) =
      let new_Sequence: lockSequence =
         { lockStart = Chain.TimeStamp,
           lockRoute = Chain.block_height,
           lockNonce = Chain.Diffulty }
      put(state{ lockGroup[lock_Owner] = new_Sequence })


   entrypoint timeLockLoopUp(lock_Owner : address) : lockSequence = 
      switch(Map.lookup(lock_Owner, state.lockGroup))
         None => abort("No data for that TimeLock")
         Some(lock_exist) => lock_exist
