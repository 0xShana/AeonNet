@compiler >= 4

contract TimeLockAggregator =
   record state  = 
      { people : map(address, lockSequence) }

   record lockSequence =
      { lockStart : string
      , lockRoute : string
      , lockNonce : int }

   entrypoint init() = { people = {} }

   stateful entrypoint timeLockAggregator(person_address: address, lock_Start': string, lock_Route': string, lock_Nonce: int) =
      let new_Sequence: lockSequence =
         { lockStart = lock_Start',
           lockRoute = lock_Route',
           lockNonce = lock_Nonce }
      put(state{ people[person_address] = new_Sequence })

   entrypoint timeLockVerifier(person_address : address) : lockSequence = 
      switch(Map.lookup(person_address, state.people))
         None => abort("No data for that person")
         Some(person_found) => person_found
