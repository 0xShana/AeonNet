contract AeonAsset =
   datatype event = NewAsset(indexed int, string, hash)

   record state = { assets : map(string, hash), next_id : int }

   stateful entrypoint init() = { assets = {}, next_id = 0 }

   entrypoint nameExists(name: string) : bool =
      Map.member(name, state.assets)

   stateful entrypoint createHamster(assetName: string) =
      require(!nameExists(assetName), "Name is already taken")
      createHamsterByNameDNA(assetName, generateDNA(hamsterName))
   
   entrypoint getHamsterDNA(assetName: string) : hash =
      require(nameExists(assetName), "Hamster does not exist!")
      state.hamsters[assetName]

   stateful function createHamsterByNameDNA(name: string, dna: hash) =
      put(state{assets[name] = dna, next_id = (state.next_id + 1)})
      Chain.event(NewAsset(state.next_id, name, dna))
 
   function generateDNA(name : string) : hash =
      String.sha3(name)
